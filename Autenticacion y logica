// app/page.tsx
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"

export default function Home() {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-sky-100">
      <div className="max-w-md w-full px-4">
        <Card className="w-full">
          <CardHeader className="text-center">
            <CardTitle className="text-2xl font-bold">MoviSimple</CardTitle>
            <CardDescription>La odisea de los seis puntos</CardDescription>
          </CardHeader>
          <CardContent className="flex flex-col gap-4">
            <Link href="/login" className="w-full">
              <Button className="w-full" variant="default">Iniciar Sesión</Button>
            </Link>
            <Link href="/register" className="w-full">
              <Button className="w-full" variant="outline">Registrarse</Button>
            </Link>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

// app/register/page.tsx
"use client"
import { useState } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { registerUser } from "@/lib/auth"

export default function Register() {
  const router = useRouter()
  const [name, setName] = useState("")
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [error, setError] = useState("")

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError("")
    if (!name || !email || !password) {
      setError("Todos los campos son obligatorios")
      return
    }
    try {
      await registerUser(name, email, password)
      router.push("/login?registered=true")
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al registrar usuario")
    }
  }

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-sky-100">
      <div className="max-w-md w-full px-4">
        <Card>
          <CardHeader className="text-center">
            <CardTitle className="text-2xl font-bold">Registro</CardTitle>
            <CardDescription>Crea una cuenta para usar MoviSimple</CardDescription>
          </CardHeader>
          <form onSubmit={handleSubmit}>
            <CardContent className="space-y-4">
              {error && <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">{error}</div>}
              <div className="space-y-2">
                <Label htmlFor="name">Nombre</Label>
                <Input id="name" type="text" value={name} onChange={(e) => setName(e.target.value)} placeholder="Ingresa tu nombre" />
              </div>
              <div className="space-y-2">
                <Label htmlFor="email">Correo electrónico</Label>
                <Input id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="correo@ejemplo.com" />
              </div>
              <div className="space-y-2">
                <Label htmlFor="password">Contraseña</Label>
                <Input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} placeholder="********" />
              </div>
            </CardContent>
            <CardFooter className="flex flex-col gap-4">
              <Button type="submit" className="w-full">Registrar</Button>
              <div className="text-center text-sm">
                ¿Ya tienes una cuenta? <Link href="/login" className="text-blue-600 hover:underline">Iniciar sesión</Link>
              </div>
            </CardFooter>
          </form>
        </Card>
      </div>
    </div>
  )
}

// app/login/page.tsx
"use client"
import { useState, useEffect } from "react"
import { useRouter, useSearchParams } from "next/navigation"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { loginUser } from "@/lib/auth"

export default function Login() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const registered = searchParams.get("registered")
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [error, setError] = useState("")
  const [success, setSuccess] = useState(false)

  useEffect(() => {
    if (registered === "true") setSuccess(true)
  }, [registered])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError("")
    setSuccess(false)
    if (!email || !password) {
      setError("Todos los campos son obligatorios")
      return
    }
    try {
      await loginUser(email, password)
      router.push("/dashboard")
    } catch (err) {
      setError(err instanceof Error ? err.message : "Credenciales inválidas")
    }
  }

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-sky-100">
      <div className="max-w-md w-full px-4">
        <Card>
          <CardHeader className="text-center">
            <CardTitle className="text-2xl font-bold">Iniciar Sesión</CardTitle>
            <CardDescription>Accede a tu cuenta de MoviSimple</CardDescription>
          </CardHeader>
          <form onSubmit={handleSubmit}>
            <CardContent className="space-y-4">
              {error && <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">{error}</div>}
              {success && (
                <Alert className="bg-green-100 border-green-400 text-green-700">
                  <AlertDescription>Registro exitoso. Ahora puedes iniciar sesión.</AlertDescription>
                </Alert>
              )}
              <div className="space-y-2">
                <Label htmlFor="email">Correo electrónico</Label>
                <Input id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="correo@ejemplo.com" />
              </div>
              <div className="space-y-2">
                <Label htmlFor="password">Contraseña</Label>
                <Input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} placeholder="********" />
              </div>
            </CardContent>
            <CardFooter className="flex flex-col gap-4">
              <Button type="submit" className="w-full">Iniciar Sesión</Button>
              <div className="text-center text-sm">
                ¿No tienes una cuenta? <Link href="/register" className="text-blue-600 hover:underline">Registrarse</Link>
              </div>
            </CardFooter>
          </form>
        </Card>
      </div>
    </div>
  )
}

// lib/auth.ts
"use client"
interface User { name: string; email: string; password: string }

export async function registerUser(name: string, email: string, password: string): Promise<void> {
  return new Promise((resolve, reject) => {
    try {
      const usersJson = localStorage.getItem("users") || "[]"
      const users: User[] = JSON.parse(usersJson)
      const existingUser = users.find((user) => user.email === email)
      if (existingUser) {
        reject(new Error("El usuario ya existe"))
        return
      }
      users.push({ name, email, password })
      localStorage.setItem("users", JSON.stringify(users))
      console.log(`User added: ${name}, ${email}, ${password}`)
      resolve()
    } catch (error) {
      reject(error)
    }
  })
}

export async function loginUser(email: string, password: string): Promise<void> {
  return new Promise((resolve, reject) => {
    try {
      const usersJson = localStorage.getItem("users") || "[]"
      const users: User[] = JSON.parse(usersJson)
      const user = users.find((user) => user.email === email && user.password === password)
      if (!user) {
        reject(new Error("Credenciales inválidas"))
        return
      }
      localStorage.setItem("currentUser", JSON.stringify({ name: user.name, email: user.email }))
      resolve()
    } catch (error) {
      reject(error)
    }
  })
}

export async function checkAuth(): Promise<{ name: string; email: string } | null> {
  return new Promise((resolve) => {
    const userJson = localStorage.getItem("currentUser")
    if (!userJson) {
      resolve(null)
      return
    }
    resolve(JSON.parse(userJson))
  })
}

export async function logout(): Promise<void> {
  return new Promise((resolve) => {
    localStorage.removeItem("currentUser")
    resolve()
  })
}

// lib/graph-simple.ts
interface Edge { node: number; weight: number }

export class GraphSimple {
  V: number
  adj: Edge[][]

  constructor(V: number) {
    this.V = V
    this.adj = Array.from({ length: V }, () => [])
  }

  addEdge(u: number, v: number, w: number): void {
    this.adj[u].push({ node: v, weight: w })
    this.adj[v].push({ node: u, weight: w })
  }

  dijkstraSimple(source: number): { distances: number[]; predecessors: number[] } {
    const distances: number[] = Array(this.V).fill(Number.MAX_SAFE_INTEGER)
    const predecessors: number[] = Array(this.V).fill(-1)
    const visited: boolean[] = Array(this.V).fill(false)
    distances[source] = 0

    for (let count = 0; count < this.V - 1; count++) {
      const u = this.minDistance(distances, visited)
      visited[u] = true
      for (const { node: v, weight } of this.adj[u]) {
        if (!visited[v] && distances[u] !== Number.MAX_SAFE_INTEGER && distances[u] + weight < distances[v]) {
          distances[v] = distances[u] + weight
          predecessors[v] = u
        }
      }
    }
    return { distances, predecessors }
  }

  private minDistance(distances: number[], visited: boolean[]): number {
    let min = Number.MAX_SAFE_INTEGER
    let minIndex = -1
    for (let v = 0; v < this.V; v++) {
      if (!visited[v] && distances[v] <= min) {
        min = distances[v]
        minIndex = v
      }
    }
    return minIndex
  }
}
